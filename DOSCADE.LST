Microsoft (R) Macro Assembler Version 6.11		    11/07/23 19:43:13
KAKASHKA						     Page 1 - 1


				TITLE KAKASHKA
				include cs240.inc
			      C .NOLIST
			      C .LIST
			      C 
					
 = 4C00				DOSEXIT = 4C00h
 = 0021				DOS = 21h
 = 001C				TIMER_HANDLER = 1ch
 = 0003				SPEED = 3
				
 = 0061				SPEAKER_PORT = 61h
 = 00B6				READY_TIMER		= 0B6h
 = 0042				TIMER_DATA_PORT		= 42h
 = 0043				TIMER_CONTROL_PORT	= 43h
				
 = 001A				SYSTEM_TIME_INT = 1Ah
 = 0000				SYSTEM_TIME = 00h
				
				
				.8086
				
 0000				.data
				
 0000 00			isMute BYTE 0
 0001 00			StartMov BYTE 0
				
				;; MUSIC
 = 0002				NOTE_TICKS = 2
 = 0002				NOTE_GAP_TICKS = 2
				
				
 0002 03			Life BYTE 3
				
 0003				Alarms	LABEL	WORD
 0003  0014 [				WORD	20 DUP(0)
        0000
       ]
 002B = 000A			HandlerCount = ($ - Alarms) / 4
				
 002B 00			GameOver BYTE 0
				
 002C 0000			PlayScore WORD 0
				
 002E 00			GameOn BYTE 0 ; 0 -> pause, 1 -> resume
				
 002F 0000 0000			CursorPos WORD 0000h, 0000h
				
 0033 28			ballCurrentX BYTE 40
 0034 15			ballCurrentY BYTE 21
				
 0035 00			ballOnBrick BYTE 0
				
 0036 00			velocityX BYTE 0
 0037 00			velocityY BYTE 0
				
 0038 00			paddleMovement BYTE 0 ; 0 - no move; 1 -> right; 2 -> left
				
 0039 28			ballNextX BYTE 40
 003A 12			ballNextY BYTE 18
				
 003B 25			paddleX BYTE 37
 003C 16			paddleY BYTE 22
				
 003D 04			brickY BYTE 4
 003E 02			brickX BYTE 2
				
 003F DF			paddleChar BYTE 0DFh
				
 0040 DC			brickChar BYTE 0DCh
				
 0041				bricksScores LABEL BYTE 
 0041  000C [			BYTE 12 Dup(2) ; y = 5 start at 4 to 8, 10 to 14
        02
       ]
 004D  000B [			BYTE 11 Dup(2) ; y = 7
        02
       ]
 0058  000C [			BYTE 12 Dup(1) ; y = 9
        01
       ]
 0064  000B [			BYTE 11 Dup(1) ; y = 11
        01
       ]
				
				
				
 006F				gameLayout LABEL BYTE
 006F  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 00BF  7C 20 20 4C 69 76	BYTE "|  Lives:                                                                      |" 
       65 73 3A 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 010F  7C 20 20 53 63 6F	BYTE "|  Score:                                                                      |" 
       72 65 3A 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 015F  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 01AF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 01FF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 024F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 029F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 02EF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 033F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 038F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 03DF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 042F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 047F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 04CF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 051F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 056F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 05BF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 060F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 065F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 06AF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 06FF  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 074F  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 079F  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 07EF  20 20 20 20 20 20	BYTE "                                                                                " 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20
 083F  00			BYTE 0
				
 0840				loserLayout LABEL BYTE
 0840  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 0890  7C 20 20 4C 69 76	BYTE "|  Lives:                                                                      |" 
       65 73 3A 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 08E0  7C 20 20 53 63 6F	BYTE "|  Score:                                                                      |" 
       72 65 3A 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0930  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 0980  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 09D0  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0A20  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0A70  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0AC0  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0B10  7C 20 20 20 20 59	BYTE "|    Y88b    /                         888       ,88~-_   ,d88~~\ 888~~        |" 
       38 38 62 20 20 20
       20 2F 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 38 38 38
       20 20 20 20 20 20
       20 2C 38 38 7E 2D
       5F 20 20 20 2C 64
       38 38 7E 7E 5C 20
       38 38 38 7E 7E 20
       20 20 20 20 20 20
       20 7C
 0B60  7C 20 20 20 20 20	BYTE "|     Y88b  /   e88~-_  888  888       888      d888   \  8888    888___       |" 
       59 38 38 62 20 20
       2F 20 20 20 65 38
       38 7E 2D 5F 20 20
       38 38 38 20 20 38
       38 38 20 20 20 20
       20 20 20 38 38 38
       20 20 20 20 20 20
       64 38 38 38 20 20
       20 5C 20 20 38 38
       38 38 20 20 20 20
       38 38 38 5F 5F 5F
       20 20 20 20 20 20
       20 7C
 0BB0  7C 20 20 20 20 20	BYTE "|      Y88b/   d888   i 888  888       888     88888    | `Y88b   888          |" 
       20 59 38 38 62 2F
       20 20 20 64 38 38
       38 20 20 20 69 20
       38 38 38 20 20 38
       38 38 20 20 20 20
       20 20 20 38 38 38
       20 20 20 20 20 38
       38 38 38 38 20 20
       20 20 7C 20 60 59
       38 38 62 20 20 20
       38 38 38 20 20 20
       20 20 20 20 20 20
       20 7C
 0C00  7C 20 20 20 20 20	BYTE "|       Y8Y    8888   | 888  888       888     88888    |  `Y88b, 888          |" 
       20 20 59 38 59 20
       20 20 20 38 38 38
       38 20 20 20 7C 20
       38 38 38 20 20 38
       38 38 20 20 20 20
       20 20 20 38 38 38
       20 20 20 20 20 38
       38 38 38 38 20 20
       20 20 7C 20 20 60
       59 38 38 62 2C 20
       38 38 38 20 20 20
       20 20 20 20 20 20
       20 7C
 0C50  7C 20 20 20 20 20	BYTE "|        Y     Y888   ' 888  888       888      Y888   /     8888 888          |" 
       20 20 20 59 20 20
       20 20 20 59 38 38
       38 20 20 20 27 20
       38 38 38 20 20 38
       38 38 20 20 20 20
       20 20 20 38 38 38
       20 20 20 20 20 20
       59 38 38 38 20 20
       20 2F 20 20 20 20
       20 38 38 38 38 20
       38 38 38 20 20 20
       20 20 20 20 20 20
       20 7C
 0CA0  7C 20 20 20 20 20	BYTE "|       /       88_-~    88_-888       888____   `88_-~   \__88P' 888___       |" 
       20 20 2F 20 20 20
       20 20 20 20 38 38
       5F 2D 7E 20 20 20
       20 38 38 5F 2D 38
       38 38 20 20 20 20
       20 20 20 38 38 38
       5F 5F 5F 5F 20 20
       20 60 38 38 5F 2D
       7E 20 20 20 5C 5F
       5F 38 38 50 27 20
       38 38 38 5F 5F 5F
       20 20 20 20 20 20
       20 7C
				
 0CF0  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0D40  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0D90  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0DE0  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0E30  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0E80  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0ED0  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 0F20  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 0F70  20 20 20 20 20 20	BYTE "                                                                                " 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20
 0FC0  00			BYTE 0
				
				
 0FC1				welcomeScreen LABEL BYTE
 0FC1  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 1011  7C 20 20 20 20 20	BYTE "|        __  __   ______  ______  ______       ______  __   __  _____          |" 
       20 20 20 5F 5F 20
       20 5F 5F 20 20 20
       5F 5F 5F 5F 5F 5F
       20 20 5F 5F 5F 5F
       5F 5F 20 20 5F 5F
       5F 5F 5F 5F 20 20
       20 20 20 20 20 5F
       5F 5F 5F 5F 5F 20
       20 5F 5F 20 20 20
       5F 5F 20 20 5F 5F
       5F 5F 5F 20 20 20
       20 20 20 20 20 20
       20 7C
 1061  7C 20 20 20 20 20	BYTE "|       /\ \/ /  /\  __ \/\__  _\/\  ___\     /\  __ \/\  -.\ \/\  __-.        |"  
       20 20 2F 5C 20 5C
       2F 20 2F 20 20 2F
       5C 20 20 5F 5F 20
       5C 2F 5C 5F 5F 20
       20 5F 5C 2F 5C 20
       20 5F 5F 5F 5C 20
       20 20 20 20 2F 5C
       20 20 5F 5F 20 5C
       2F 5C 20 20 2D 2E
       5C 20 5C 2F 5C 20
       20 5F 5F 2D 2E 20
       20 20 20 20 20 20
       20 7C
 10B1  7C 20 20 20 20 20	BYTE "|       \ \  _ -.\ \  __ \/_/\ \/\ \  __\     \ \  __ \ \ \-.  \ \ \/\ \       |" 
       20 20 5C 20 5C 20
       20 5F 20 2D 2E 5C
       20 5C 20 20 5F 5F
       20 5C 2F 5F 2F 5C
       20 5C 2F 5C 20 5C
       20 20 5F 5F 5C 20
       20 20 20 20 5C 20
       5C 20 20 5F 5F 20
       5C 20 5C 20 5C 2D
       2E 20 20 5C 20 5C
       20 5C 2F 5C 20 5C
       20 20 20 20 20 20
       20 7C
 1101  7C 20 20 20 20 20	BYTE "|        \ \_\ \_\\ \_\ \_\ \ \_\ \ \_____\    \ \_\ \_\ \_\\ \_\ \____-       |" 
       20 20 20 5C 20 5C
       5F 5C 20 5C 5F 5C
       5C 20 5C 5F 5C 20
       5C 5F 5C 20 5C 20
       5C 5F 5C 20 5C 20
       5C 5F 5F 5F 5F 5F
       5C 20 20 20 20 5C
       20 5C 5F 5C 20 5C
       5F 5C 20 5C 5F 5C
       5C 20 5C 5F 5C 20
       5C 5F 5F 5F 5F 2D
       20 20 20 20 20 20
       20 7C
 1151  7C 20 20 20 20 20	BYTE "|         \/_/\/_/ \/_/\/_/  \/_/  \/_____/     \/_/\/_/\/_/ \/_/\/____/       |"  
       20 20 20 20 5C 2F
       5F 2F 5C 2F 5F 2F
       20 5C 2F 5F 2F 5C
       2F 5F 2F 20 20 5C
       2F 5F 2F 20 20 5C
       2F 5F 5F 5F 5F 5F
       2F 20 20 20 20 20
       5C 2F 5F 2F 5C 2F
       5F 2F 5C 2F 5F 2F
       20 5C 2F 5F 2F 5C
       2F 5F 5F 5F 5F 2F
       20 20 20 20 20 20
       20 7C
 11A1  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 11F1  7C 20 20 20 20 20	BYTE "|             ______  ______  __  ______  __  __  ______                       |" 
       20 20 20 20 20 20
       20 20 5F 5F 5F 5F
       5F 5F 20 20 5F 5F
       5F 5F 5F 5F 20 20
       5F 5F 20 20 5F 5F
       5F 5F 5F 5F 20 20
       5F 5F 20 20 5F 5F
       20 20 5F 5F 5F 5F
       5F 5F 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1241  7C 20 20 20 20 20	BYTE "|            /\  ___\/\  == \/\ \/\  ___\/\ \_\ \/\  __ \                      |" 
       20 20 20 20 20 20
       20 2F 5C 20 20 5F
       5F 5F 5C 2F 5C 20
       20 3D 3D 20 5C 2F
       5C 20 5C 2F 5C 20
       20 5F 5F 5F 5C 2F
       5C 20 5C 5F 5C 20
       5C 2F 5C 20 20 5F
       5F 20 5C 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1291  7C 20 20 20 20 20	BYTE "|            \ \ \__ \ \  __<\ \ \ \___  \ \  __ \ \  __ \                     |" 
       20 20 20 20 20 20
       20 5C 20 5C 20 5C
       5F 5F 20 5C 20 5C
       20 20 5F 5F 3C 5C
       20 5C 20 5C 20 5C
       5F 5F 5F 20 20 5C
       20 5C 20 20 5F 5F
       20 5C 20 5C 20 20
       5F 5F 20 5C 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 12E1  7C 20 20 20 20 20	BYTE "|             \ \_____\ \_\ \_\ \_\/\_____\ \_\ \_\ \_\ \_\                    |" 
       20 20 20 20 20 20
       20 20 5C 20 5C 5F
       5F 5F 5F 5F 5C 20
       5C 5F 5C 20 5C 5F
       5C 20 5C 5F 5C 2F
       5C 5F 5F 5F 5F 5F
       5C 20 5C 5F 5C 20
       5C 5F 5C 20 5C 5F
       5C 20 5C 5F 5C 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1331  7C 20 20 20 20 20	BYTE "|              \/_____/\/_/ /_/\/_/\/_____/\/_/\/_/\/_/\/_/                    |" 
       20 20 20 20 20 20
       20 20 20 5C 2F 5F
       5F 5F 5F 5F 2F 5C
       2F 5F 2F 20 2F 5F
       2F 5C 2F 5F 2F 5C
       2F 5F 5F 5F 5F 5F
       2F 5C 2F 5F 2F 5C
       2F 5F 2F 5C 2F 5F
       2F 5C 2F 5F 2F 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1381  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 13D1  7C 20 20 20 20 20	BYTE "|        ______  ______  ______  ______  __  __   ______  __  __  ______       |" 
       20 20 20 5F 5F 5F
       5F 5F 5F 20 20 5F
       5F 5F 5F 5F 5F 20
       20 5F 5F 5F 5F 5F
       5F 20 20 5F 5F 5F
       5F 5F 5F 20 20 5F
       5F 20 20 5F 5F 20
       20 20 5F 5F 5F 5F
       5F 5F 20 20 5F 5F
       20 20 5F 5F 20 20
       5F 5F 5F 5F 5F 5F
       20 20 20 20 20 20
       20 7C
 1421  7C 20 20 20 20 20	BYTE "|       /\  == \/\  == \/\  ___\/\  __ \/\ \/ /  /\  __ \/\ \/\ \/\__  _\      |" 
       20 20 2F 5C 20 20
       3D 3D 20 5C 2F 5C
       20 20 3D 3D 20 5C
       2F 5C 20 20 5F 5F
       5F 5C 2F 5C 20 20
       5F 5F 20 5C 2F 5C
       20 5C 2F 20 2F 20
       20 2F 5C 20 20 5F
       5F 20 5C 2F 5C 20
       5C 2F 5C 20 5C 2F
       5C 5F 5F 20 20 5F
       5C 20 20 20 20 20
       20 7C
 1471  7C 20 20 20 20 20	BYTE "|       \ \  __<\ \  __<\ \  __\\ \  __ \ \  _ -.\ \ \/\ \ \ \_\ \/_/\ \/      |" 
       20 20 5C 20 5C 20
       20 5F 5F 3C 5C 20
       5C 20 20 5F 5F 3C
       5C 20 5C 20 20 5F
       5F 5C 5C 20 5C 20
       20 5F 5F 20 5C 20
       5C 20 20 5F 20 2D
       2E 5C 20 5C 20 5C
       2F 5C 20 5C 20 5C
       20 5C 5F 5C 20 5C
       2F 5F 2F 5C 20 5C
       2F 20 20 20 20 20
       20 7C
 14C1  7C 20 20 20 20 20	BYTE "|        \ \_____\ \_\ \_\ \_____\ \_\ \_\ \_\ \_\\ \_____\ \_____\ \ \_\      |" 
       20 20 20 5C 20 5C
       5F 5F 5F 5F 5F 5C
       20 5C 5F 5C 20 5C
       5F 5C 20 5C 5F 5F
       5F 5F 5F 5C 20 5C
       5F 5C 20 5C 5F 5C
       20 5C 5F 5C 20 5C
       5F 5C 5C 20 5C 5F
       5F 5F 5F 5F 5C 20
       5C 5F 5F 5F 5F 5F
       5C 20 5C 20 5C 5F
       5C 20 20 20 20 20
       20 7C
 1511  7C 20 20 20 20 20	BYTE "|         \/_____/\/_/ /_/\/_____/\/_/\/_/\/_/\/_/ \/_____/\/_____/  \/_/      |" 
       20 20 20 20 5C 2F
       5F 5F 5F 5F 5F 2F
       5C 2F 5F 2F 20 2F
       5F 2F 5C 2F 5F 5F
       5F 5F 5F 2F 5C 2F
       5F 2F 5C 2F 5F 2F
       5C 2F 5F 2F 5C 2F
       5F 2F 20 5C 2F 5F
       5F 5F 5F 5F 2F 5C
       2F 5F 5F 5F 5F 5F
       2F 20 20 5C 2F 5F
       2F 20 20 20 20 20
       20 7C
 1561  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 15B1  7C 20 20 20 20 20	BYTE "|               left - A          Press Space          right - D               |" 
       20 20 20 20 20 20
       20 20 20 20 6C 65
       66 74 20 2D 20 41
       20 20 20 20 20 20
       20 20 20 20 50 72
       65 73 73 20 53 70
       61 63 65 20 20 20
       20 20 20 20 20 20
       20 72 69 67 68 74
       20 2D 20 44 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1601  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1651  7C 20 20 20 20 20	BYTE "|                Mute - M                              Quit - Q                |" 
       20 20 20 20 20 20
       20 20 20 20 20 4D
       75 74 65 20 2D 20
       4D 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 51 75 69 74 20
       2D 20 51 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 16A1  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 16F1  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 1741  00			BYTE 0
				
				
 1742				WinnerLayout LABEL BYTE
 1742  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 1792  7C 20 20 4C 69 76	BYTE "|  Lives:                                                                      |" 
       65 73 3A 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 17E2  7C 20 20 53 63 6F	BYTE "|  Score:                                                                      |" 
       72 65 3A 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1832  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 1882  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 18D2  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1922  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1972  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 19C2  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1A12  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1A62  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1AB2  7C 20 20 20 20 20	BYTE "|      Y88b    /                         Y88b         / 888 888b    |          |" 
       20 59 38 38 62 20
       20 20 20 2F 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 59
       38 38 62 20 20 20
       20 20 20 20 20 20
       2F 20 38 38 38 20
       38 38 38 62 20 20
       20 20 7C 20 20 20
       20 20 20 20 20 20
       20 7C
 1B02  7C 20 20 20 20 20	BYTE "|       Y88b  /   e88~-_  888  888        Y88b       /  888 |Y88b   |          |" 
       20 20 59 38 38 62
       20 20 2F 20 20 20
       65 38 38 7E 2D 5F
       20 20 38 38 38 20
       20 38 38 38 20 20
       20 20 20 20 20 20
       59 38 38 62 20 20
       20 20 20 20 20 2F
       20 20 38 38 38 20
       7C 59 38 38 62 20
       20 20 7C 20 20 20
       20 20 20 20 20 20
       20 7C
 1B52  7C 20 20 20 20 20	BYTE "|        Y88b/   d888   i 888  888         Y88b  e  /   888 | Y88b  |          |" 
       20 20 20 59 38 38
       62 2F 20 20 20 64
       38 38 38 20 20 20
       69 20 38 38 38 20
       20 38 38 38 20 20
       20 20 20 20 20 20
       20 59 38 38 62 20
       20 65 20 20 2F 20
       20 20 38 38 38 20
       7C 20 59 38 38 62
       20 20 7C 20 20 20
       20 20 20 20 20 20
       20 7C
 1BA2  7C 20 20 20 20 20	BYTE "|         Y8Y    8888   | 888  888          Y88bd8b/    888 |  Y88b |          |" 
       20 20 20 20 59 38
       59 20 20 20 20 38
       38 38 38 20 20 20
       7C 20 38 38 38 20
       20 38 38 38 20 20
       20 20 20 20 20 20
       20 20 59 38 38 62
       64 38 62 2F 20 20
       20 20 38 38 38 20
       7C 20 20 59 38 38
       62 20 7C 20 20 20
       20 20 20 20 20 20
       20 7C
 1BF2  7C 20 20 20 20 20	BYTE "|          Y     Y888   ' 888  888           Y88Y8Y     888 |   Y88b|          |" 
       20 20 20 20 20 59
       20 20 20 20 20 59
       38 38 38 20 20 20
       27 20 38 38 38 20
       20 38 38 38 20 20
       20 20 20 20 20 20
       20 20 20 59 38 38
       59 38 59 20 20 20
       20 20 38 38 38 20
       7C 20 20 20 59 38
       38 62 7C 20 20 20
       20 20 20 20 20 20
       20 7C
 1C42  7C 20 20 20 20 20	BYTE "|         /       88_-~    88_-888            Y  Y      888 |    Y888          |" 
       20 20 20 20 2F 20
       20 20 20 20 20 20
       38 38 5F 2D 7E 20
       20 20 20 38 38 5F
       2D 38 38 38 20 20
       20 20 20 20 20 20
       20 20 20 20 59 20
       20 59 20 20 20 20
       20 20 38 38 38 20
       7C 20 20 20 20 59
       38 38 38 20 20 20
       20 20 20 20 20 20
       20 7C
 1C92  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1CE2  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1D32  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1D82  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1DD2  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1E22  7C 20 20 20 20 20	BYTE "|                                                                              |" 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 7C
 1E72  2B 2D 2D 2D 2D 2D	BYTE "+------------------------------------------------------------------------------+"
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2B
 1EC2  20 20 20 20 20 20	BYTE "                                                                                " 
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20
 1F12  00			BYTE 0
				
				; MusicScore LABEL WORD 
				; WORD 1614, 2153 ; F#  C#
				; WORD 1614, 2153, 1614, 2153
				; WORD 1614, 2153, 1614, 2153, 1614, 2153
				; WORD 2420, 2711, 2153, 2153 ; B A C#
				; WORD 2711, 2420, 1810 ; A B E
				; WORD 1918, 0 ; D#
				; MusicScore WORD 1614, 2153, 1614, 2153, 1614, 2153, 2420, 2711, 2153, 2153, 2711, 2420, 1810, 1918, 0h
				; ; MusicScore WORD 1614
				; ; WORD 2153
				; ; WORD 0
				; MusicIndex WORD 0 ; pointer to current note in MusicScore
				;;
 1F13 064E 0869 064E 0869	MusicScore WORD 1614, 2153, 1614, 2153, 1614, 2153, 2420, 2711, 2153, 2153, 2711, 2420, 1810, 1918, 1810, 1614, 1918, 2420
       064E 0869 0974
       0A97 0869 0869
       0A97 0974 0712
       077E 0712 064E
       077E 0974
 1F37  064E 0974 064E		WORD 1614, 2420, 1614, 2420, 1614, 2420, 1614, 2560, 1614, 2560, 1521, 2560
       0974 064E 0974
       064E 0A00 064E
       0A00 05F1 0A00
 1F4F  064E 07F0 064E		WORD 1614, 2032, 1614, 2032, 1810, 1614
       07F0 0712 064E
 1F5B  0712 0CA1 07F0		WORD 1810, 3233, 2032, 3233, 2153, 3233, 0
       0CA1 0869 0CA1
       0000
 1F69 0000			MusicIndex WORD 0 ; pointer to current note in MusicScore
				
 1F6B 00			SoundOff BYTE 0
				
 0000				.code
				
 0000 00000000			OldTimerHandler DWORD	00000000h
				
 0004 0000			Tick WORD 0
				
				
 0006				RandomVelX PROC
 0006  9C				pushf
 0007  50				push ax
 0008  51				push cx
 0009  52				push dx
				
 000A  B4 00				mov ah, SYSTEM_TIME  ; interrupts to get system time        
 000C  CD 1A				int SYSTEM_TIME_INT      ; CX:DX = number of clock ticks since midnight      
				
 000E  8B C2				mov  ax, dx ; ax = dx
 0010  33 D2				xor  dx, dx ; dx = 0
 0012  B9 0002				mov  cx, 2  ; cx = mod = 3
 0015  F7 F1				div  cx       ; here dx = remainder of the division - from 0 to 3
				
 0017  88 16 0036 R			mov velocityX, dl
				
 001B  5A				pop dx
 001C  59				pop cx
 001D  58				pop ax
 001E  9D				popf
 001F  C3				ret
 0020				RandomVelX ENDP
				
				; MUSIC 
				
 0020				SpeakerOn PROC
 0020  9C				pushf
 0021  50				push	ax
				
 0022  E4 61				in	al, SPEAKER_PORT		; Read the speaker register
 0024  0C 03				or	al, 03h				; Set the two low bits high
 0026  E6 61				out	SPEAKER_PORT, al		; Write the speaker register
				
 0028  58				pop	ax
 0029  9D				popf
 002A  C3				ret
 002B				SpeakerOn ENDP
				
 002B				SpeakerOff PROC
 002B  9C				pushf
 002C  50				push	ax
				
 002D  E4 61				in	al, SPEAKER_PORT		; Read the speaker register
 002F  24 FC				and	al, 0FCh			; Clear the two low bits high
 0031  E6 61				out	SPEAKER_PORT, al		; Write the speaker register
				
 0033  58				pop	ax
 0034  9D				popf
 0035  C3				ret
 0036				SpeakerOff ENDP
				
 0036				SetupMusic PROC
					;; DX = OFFSET of location of score
 0036  9C				pushf
 0037  52				push dx
 0038  BA 1F13 R			mov dx, OFFSET MusicScore
 003B  89 16 1F69 R			mov	MusicIndex, dx
 003F  5A				pop dx
 0040  9D				popf
 0041  C3				ret 
 0042				SetupMusic ENDP
				
				
 0042				PlayFrequency PROC
					;; Frequency is found in DX
 0042  9C				pushf
 0043  50				push ax
 0044  53				push bx
 0045  51				push cx
 0046  52				push dx 
 0047  56				push si 
 0048  57				push di 
 0049  55				push bp 
 004A  06				push es 
					
 004B  83 FA 00				cmp	dx, 0
 004E  74 19				je	rest
				
					; call	NoteFrequencyToTimerCount
				
 0050  B0 B6				mov	al, READY_TIMER			; Get the timer ready
 0052  E6 43				out	TIMER_CONTROL_PORT, al
				
 0054  8A C2				mov	al, dl
 0056  E6 42				out	TIMER_DATA_PORT, al		; Send the count low byte
					
 0058  8A C6				mov	al, dh
 005A  E6 42				out	TIMER_DATA_PORT, al		; Send the count high byte
					
 005C  E8 FFC1				call	SpeakerOn
				
 005F				done:	
 005F  07				pop es 
 0060  5D				pop bp 
 0061  5F				pop di 
 0062  5E				pop si 
 0063  5A				pop dx 
 0064  59				pop cx 
 0065  5B				pop bx 
 0066  58				pop ax
 0067  9D				popf
 0068  C3				ret
 0069				rest:
 0069  E8 FFBF				call	SpeakerOff
 006C  EB F1				jmp	done
 006E				PlayFrequency ENDP
				
 006E				PlayNextNote PROC
 006E  9C				pushf
 006F  50				push ax
 0070  53				push bx
 0071  51				push cx
 0072  52				push dx 
 0073  56				push si 
 0074  57				push di 
 0075  55				push bp 
 0076  06				push es 
					
				
 0077  8B 36 1F69 R			mov	si, MusicIndex
 007B  83 3C 00				cmp	WORD PTR [si], 0
 007E  75 07				jne	cont
				
					;; Repeat tune
					
 0080  BE 1F13 R			mov	si, OFFSET MusicScore
 0083  89 36 1F69 R			mov	MusicIndex, si
				
 0087				cont:	
					; where should frequency be ??? in DX 
 0087  8B 14				mov dx, [si]
 0089  80 3E 0000 R 01			cmp isMute, 1
 008E  74 03				je skip
 0090  E8 FFAF				call	PlayFrequency
 0093					skip:
 0093  B8 0002			 	mov	ax, NOTE_TICKS
 0096  BA 00AD R		 	mov	dx, OFFSET StopNote
 0099  E8 0166				call	RegisterAlarm
 009C				done:	
 009C  83 C6 02				add si, 2
 009F  89 36 1F69 R			mov MusicIndex, si
 00A3  07				pop es 
 00A4  5D				pop bp 
 00A5  5F				pop di 
 00A6  5E				pop si 
 00A7  5A				pop dx 
 00A8  59				pop cx 
 00A9  5B				pop bx 
 00AA  58				pop ax
 00AB  9D				popf
 00AC  C3				ret
 00AD				PlayNextNote ENDP
				
				
 00AD				StopNote PROC
 00AD  9C				pushf
 00AE  50				push ax
 00AF  53				push bx
 00B0  51				push cx
 00B1  52				push dx 
 00B2  56				push si 
 00B3  57				push di 
 00B4  55				push bp 
 00B5  06				push es 
				
 00B6  E8 FF72				call	SpeakerOff
					
 00B9  B8 0002			 	mov	ax, NOTE_GAP_TICKS
 00BC  BA 006E R		 	mov	dx, OFFSET PlayNextNote
 00BF  E8 0140				call	RegisterAlarm
				
 00C2				done:	
 00C2  07				pop es 
 00C3  5D				pop bp 
 00C4  5F				pop di 
 00C5  5E				pop si 
 00C6  5A				pop dx 
 00C7  59				pop cx 
 00C8  5B				pop bx 
 00C9  58				pop ax
 00CA  9D				popf
 00CB  C3				ret
 00CC				StopNote ENDP
				
				;;;;;;
				
 00CC				DisplayScore PROC 
 00CC  9C				pushf
 00CD  50				push ax
 00CE  53				push bx
 00CF  51				push cx
 00D0  52				push dx 
 00D1  56				push si 
 00D2  57				push di 
 00D3  55				push bp 
 00D4  06				push es 
				
 00D5  B8 B800				mov ax, 0B800h 
 00D8  8E C0				mov es, ax 
				
					; lives 
 00DA  BF 00B4				mov di, 180
 00DD  8A 1E 0002 R			mov bl, Life
 00E1  83 FB 03				cmp bx, 3
 00E4  83 E3 0F				and bx, 0Fh
 00E7  74 0A				je lifeThree
 00E9  83 FB 02				cmp bx, 2
 00EC  74 0C				je lifeTwo
 00EE  83 FB 01				cmp bx, 1
 00F1  74 0E				je lifeOne
 00F3				lifeThree:
 00F3  B2 33				mov dl, '3'
 00F5  26: 88 15			mov es:[di], dl
 00F8  EB 0E				jmp scoring
 00FA				lifeTwo:
 00FA  B2 32				mov dl, '2'
 00FC  26: 88 15			mov es:[di], dl
 00FF  EB 07				jmp scoring
 0101				lifeOne:
 0101  B2 31				mov dl, '1'
 0103  26: 88 15			mov es:[di], dl
 0106  EB 00				jmp scoring
					
 0108				scoring:
 0108  81 C7 00A0			add di, 160
 010C  B6 20				mov dh, ' '
				
 010E  8B 16 002C R			mov dx, PlayScore
				; if score is less than 10
 0112  83 FA 0A				cmp dx, 10
 0115  73 12				jae twodigitScore
 0117  83 C2 30				add dx, 48
 011A  26: 88 15			mov es:[di], dl
 011D  B2 30				mov dl, '0'
 011F  26: 88 55 02			mov es:[di + 2], dl 
 0123  26: 88 55 04			mov es:[di + 4], dl
 0127  EB 1E				jmp scoringDone
				
 0129				twodigitScore:
					; need to get the lower digit and the upper digit...
 0129  8B 16 002C R			mov dx, PlayScore
 012D  E8 0021				call SplitIntoDigits
 0130  80 C6 30				add dh, 48
 0133  80 C2 30				add dl, 48
 0136  26: 88 35			mov es:[di], dh 
 0139  26: 88 55 02			mov es:[di + 2], dl
 013D  B2 30				mov dl, '0'
 013F  26: 88 55 04			mov es:[di + 4], dl 
 0143  26: 88 55 06			mov es:[di + 6], dl
 0147				scoringDone:
 0147  07				pop es 
 0148  5D				pop bp 
 0149  5F				pop di 
 014A  5E				pop si 
 014B  5A				pop dx 
 014C  59				pop cx 
 014D  5B				pop bx 
 014E  58				pop ax
 014F  9D				popf
 0150  C3				ret 
 0151				DisplayScore ENDP
				
 0151				SplitIntoDigits PROC 
					; Number to split in dx 
 0151  9C				pushf
 0152  51				push cx 
 0153  B9 0000				mov cx, 0
 0156				countTens:
 0156  83 FA 0A				cmp dx, 10
 0159  72 06				jb lessThanTen
 015B  41				inc cx
 015C  83 EA 0A				sub dx, 10
 015F  EB F5				jmp countTens
 0161				lessThanTen:
 0161  8A F1				mov dh, cl 
					
				
 0163  59				pop cx
 0164  9D				popf
 0165  C3				ret
 0166				SplitIntoDigits ENDP
				
				
 0166				CursorOff PROC ;turns the cursor off
 0166  9C			  pushf
 0167  50			  push ax
 0168  53			  push bx
 0169  51			  push cx
 016A  B7 00			  mov bh, 0
 016C  B4 03			  mov ah, 03h
 016E  CD 10			  int 10h
 0170  BB 002F R		  mov bx, offset CursorPos
 0173  89 17			  mov [bx], dx
 0175  B4 01			  mov ah, 01h
 0177  B9 2607			  mov cx, 2607h
 017A  CD 10			  int 10h
 017C  59			  pop cx
 017D  5B			  pop bx
 017E  58			  pop ax
 017F  9D			  popf
 0180  C3			  ret
 0181				CursorOff ENDP
				
 0181				CursorOn PROC ;turns the cursor on
 0181  9C			  pushf
 0182  50			  push ax
 0183  53			  push bx
 0184  51			  push cx
 0185  52			  push dx
				
 0186  BB 002F R		  mov bx, offset CursorPos
 0189  8B 17			  mov dx, [bx]
 018B  B7 00			  mov bh, 0
 018D  B4 02			  mov ah, 02h
 018F  CD 10			  int 10h
				
 0191  B4 01			  mov ah, 01h
 0193  B9 0607			  mov cx, 0607h
 0196  CD 10			  int 10h
				
 0198  5A			  pop dx
 0199  59			  pop cx
 019A  5B			  pop bx
 019B  58			  pop ax
 019C  9D			  popf
 019D  C3			  ret
 019E				CursorOn ENDP
				
 019E				DOS_GetInterruptVector PROC
					;; AL = interrupt number
					;; Returns:
					;; ES:BX = current interrupt handler
					
 019E  50				push	ax
					
 019F  B4 35				mov	ah, 35h		; DOS function to get vector
 01A1  CD 21				int	DOS		; Call DOS
					;; Returns:
					;; ES:BX = current interrupt handler
					
 01A3  58				pop	ax
 01A4  C3				ret
 01A5				DOS_GetInterruptVector ENDP
				
 01A5				DOS_SetInterruptVector PROC
					;; AL = interrupt number
					;; ES:DX = new interrupt handler
 01A5  50				push	ax
 01A6  53				push	bx
 01A7  1E				push	ds
					
 01A8  8C C3				mov	bx, es		; DS = ES
 01AA  8E DB				mov	ds, bx
 01AC  B4 25				mov	ah, 25h		; DOS function to set vector
 01AE  CD 21				int	DOS		; Call DOS
					
 01B0  1F				pop	ds
 01B1  5B				pop	bx
 01B2  58				pop	ax
 01B3  C3				ret
 01B4				DOS_SetInterruptVector ENDP
				
 01B4				HookTimerInterrupt PROC
 01B4  9C			    pushf
 01B5  06			    push es
 01B6  53			    push bx
 01B7  50			    push ax
 01B8  52			    push dx
				
				    ; gets old interrupt 
 01B9  B0 1C			    mov al, TIMER_HANDLER
 01BB  E8 FFE0			    call DOS_GetInterruptVector ; ES:BX = old interrupt
 01BE  8B D3			    mov dx, bx ; DX = BX = offset
 01C0  8C C0			    mov ax, es ; AX = ES = segment
 01C2  BB 0000 R		    mov bx, offset OldTimerHandler ; BX = offset OldTimeHandler
				
				    ; saves old interrupt in OldTimerHandler
 01C5  2E: 89 17		    mov cs:[bx], dx
 01C8  2E: 89 47 02		    mov cs:[bx + 2], ax
				
 01CC  8C C8			    mov	ax, cs				; ES = CS
 01CE  8E C0				mov	es, ax				; ES = segment of handler
 01D0  BA 01F8 R			mov	dx, NewTimerHandler	; DX = offset of handler
 01D3  B0 1C				mov	al, TIMER_HANDLER      		; Timer Handler Interrrupt
 01D5  E8 FFCD				call DOS_SetInterruptVector
				
 01D8  5A			    pop dx
 01D9  58			    pop ax
 01DA  5B			    pop bx
 01DB  07			    pop es
 01DC  9D			    popf
 01DD  C3			    ret
 01DE				HookTimerInterrupt ENDP
				
 01DE				UnHookInterrupt PROC
 01DE  9C			    pushf
 01DF  06			    push es
 01E0  53			    push bx
 01E1  50			    push ax
 01E2  52			    push dx
				
				    
 01E3  BB 0000 R		    mov bx, offset OldTimerHandler
 01E6  B0 1C			    mov al, TIMER_HANDLER
 01E8  2E: 8E 47 02		    mov es, cs:[bx + 2]
 01EC  2E: 8B 17		    mov dx, cs:[bx]
				
 01EF  E8 FFB3				call DOS_SetInterruptVector
				
 01F2  5A			    pop dx
 01F3  58			    pop ax
 01F4  5B			    pop bx
 01F5  07			    pop es
 01F6  9D			    popf
 01F7  C3			    ret
 01F8				UnHookInterrupt ENDP
				
 01F8				NewTimerHandler PROC
 01F8  2E: FF 06 0004 R			inc	cs:Tick
 01FD  2E: FF 2E 0000 R			jmp	cs:OldTimerHandler
 0202				NewTimerHandler ENDP
				
 0202				RegisterAlarm PROC
					;; AX=tick count
					;; DX=Handler offset
					
 0202  9C				pushf
 0203  53				push	bx
 0204  51				push	cx
				
 0205  B9 0000				mov	cx, 0
 0208  BB 0003 R			mov	bx, OFFSET Alarms
 020B  EB 10				jmp	cond
 020D				top:
 020D  83 3F 00				cmp	WORD PTR [bx], 0
 0210  75 07				jne	used
 0212  89 07				mov	WORD PTR [bx], ax
 0214  89 57 02				mov	WORD PTR [bx + 2], dx
 0217  EB 0A				jmp	done
 0219				used:	
 0219  41				inc	cx
 021A  83 C3 04				add	bx, 4
 021D				cond:	
 021D  81 F9 000A			cmp	cx, HandlerCount
 0221  7C EA				jl	top
 0223				done:	
 0223  59				pop	cx
 0224  5B				pop	bx
 0225  9D				popf
 0226  C3				ret
 0227				RegisterAlarm ENDP
				
 0227				CheckAlarms PROC
					
 0227  9C				pushf
 0228  53				push	bx
 0229  51				push	cx
					
 022A  2E: 83 3E 0004 R			cmp	cs:Tick, 0
       00
 0230  74 28				je	notick
 0232  2E: C7 06 0004 R			mov	cs:Tick, 0
       0000
				
					;; for (cx = 0; cx < HandlerCount; cx += 4)...
 0239  B9 0000				mov	cx, 0
 023C  BB 0003 R			mov	bx, OFFSET Alarms ;
 023F  EB 13				jmp	cond
 0241				top:
 0241  83 3F 00				cmp	WORD PTR [bx], 0 ; See if this alarm is in use
 0244  74 0A				je	unused
 0246  FF 0F				dec	WORD PTR [bx]	; Yup. Take a tick away
 0248  83 3F 00				cmp	WORD PTR [bx], 0 ; Did it go off?
 024B  77 03				ja	running
 024D  FF 57 02				call	WORD PTR [bx + 2] ; Yup. Call the alarm code
					
 0250				running:	
 0250				unused:	
 0250  83 C3 04				add	bx, 4		; Skip to the next handler
 0253  41				inc	cx
 0254				cond:	
 0254  81 F9 000A			cmp	cx, HandlerCount
 0258  7C E7				jl	top
					
 025A				notick:	
 025A  59				pop	cx
 025B  5B				pop	bx
 025C  9D				popf
 025D  C3				ret
 025E				CheckAlarms ENDP
				
 025E				RegBallAlarm PROC
					; call dumpregs
 025E  9C				pushf 
 025F  50				push ax
 0260  52				push dx
 0261  E8 000D				call BallMovement
 0264  B8 0003				mov ax, SPEED
 0267  BA 025E R			mov dx, offset RegBallAlarm
 026A  E8 FF95				call RegisterAlarm
 026D  5A				pop dx
 026E  58				pop ax
 026F  9D				popf
 0270  C3				ret
 0271				RegBallAlarm ENDP
				
 0271				BallMovement PROC
 0271  9C				pushf
 0272  50				push ax
 0273  52				push dx ; paddleX
 0274  51				push cx
				
 0275  E8 04A6				call EraseBall
 0278  80 3E 002E R 00			cmp GameOn, 0
 027D  75 03 E9 00B4			je done
				
					; call BallMovementBrick 
				
 0282  8A 16 003B R			mov dl, paddleX; dl = paddleX
				
 0286  8A 26 0036 R			mov ah, velocityX ; ah = velocity X
 028A  A0 0037 R			mov al, velocityY ; al = velocity Y
				
 028D  00 26 0033 R			add ballCurrentX, ah
 0291  00 06 0034 R			add ballCurrentY, al
				
 0295  80 3E 0034 R 16			cmp ballCurrentY, 22
 029A  74 71				je over
				
 029C  80 3E 0034 R 04			cmp ballCurrentY, 4
 02A1  7F 0A				jg checklow
 02A3  C6 06 0034 R 04			mov ballCurrentY, 4
 02A8  F6 D8				neg al	
 02AA  A2 0037 R			mov velocityY, al
				
 02AD				checklow:
 02AD  80 3E 0034 R 15			cmp ballCurrentY, 21
 02B2  7C 33				jl checkxleft
 02B4  C6 06 0034 R 15			mov ballCurrentY, 21
 02B9  38 16 0033 R			cmp ballCurrentX, dl
 02BD  72 4E				jb over
 02BF  80 C2 0A				add dl, 10
 02C2  38 16 0033 R			cmp ballCurrentX, dl
 02C6  77 45				ja over
 02C8  F6 D8				neg al	
 02CA  A2 0037 R			mov velocityY, al
				
 02CD  80 3E 0038 R 01			cmp paddleMovement, 1
 02D2  74 09				je moveballright
				
 02D4  80 3E 0038 R 02			cmp paddleMovement, 2
 02D9  74 06				je moveballleft
				
 02DB  EB 0A				jmp checkxleft
 02DD				moveballright:
 02DD  FE C4				inc ah
 02DF  EB 02				jmp changeVelX
 02E1				moveballleft:
 02E1  FE CC				dec ah
 02E3				changeVelX:
 02E3  88 26 0036 R			mov velocityX, ah
 02E7				checkxleft:
 02E7  80 3E 0033 R 01			cmp ballCurrentX, 1
 02EC  7F 0B				jg checkxright
 02EE  C6 06 0033 R 01			mov ballCurrentX, 1
 02F3  F6 DC				neg ah	
 02F5  88 26 0036 R			mov velocityX, ah
 02F9				checkxright:
 02F9  80 3E 0033 R 4E			cmp ballCurrentX, 78
 02FE  7C 36				jl done
 0300  C6 06 0033 R 4E			mov ballCurrentX, 78
 0305  F6 DC				neg ah
 0307  88 26 0036 R			mov velocityX, ah
 030B  EB 29				jmp done
 030D				over:
 030D  E8 040E				call EraseBall
 0310  FE 0E 0002 R			dec Life
 0314  80 3E 0002 R 00			cmp Life, 0
 0319  74 16				je gamelose
 031B  C6 06 002E R 00			mov GameOn, 0
 0320  C6 06 0033 R 28			mov BallCurrentX, 40
 0325  C6 06 0034 R 15			mov ballCurrentY, 21
 032A  C6 06 0001 R 00			mov StartMov, 0
 032F  EB 05				jmp done
 0331				gamelose:
 0331  C6 06 002B R 01			mov GameOver, 1
 0336				done:
 0336  E8 014E				call BallMovementBrick
 0339  80 3E 0035 R 00			cmp ballOnBrick, 0 ; no collision
 033E  74 30				je skipCollision
 0340  80 3E 0000 R 01			cmp isMute, 1
 0345  74 08				je here1
 0347  52				push dx  ; ;; ; ; 
 0348  BA 05DC				mov dx, 1500 ; ;; ; ; 
 034B  E8 FCF4				call PlayFrequency; ;; ; ; 
 034E  5A				pop dx; ;; ; ; 
 034F					here1:
 034F  FF 06 002C R			inc PlayScore
 0353  A0 0037 R			mov al, velocityY
 0356  F6 D8				neg al
 0358  A2 0037 R			mov velocityY, al
 035B  C6 06 0035 R 00			mov ballOnBrick, 0
 0360  83 3E 002C R 51			cmp PlayScore, 81
 0365  73 02				jae win
 0367  EB 07				jmp skipCollision
 0369				win:
 0369  C6 06 002B R 02			mov GameOver, 2
 036E  EB 1F				jmp done2
 0370				skipCollision:
 0370  E8 0373				call SpawnBall
 0373  80 3E 0036 R 01			cmp velocityX, 1
 0378  7F 09				jg upperbound
 037A  80 3E 0036 R FF			cmp velocityX, -1
 037F  7C 09				jl lowerbound
 0381  EB 0C				jmp done2
 0383				upperbound:
 0383  C6 06 0036 R 01			mov velocityX, 1
 0388  EB 05				jmp done2
 038A				lowerbound:
 038A  C6 06 0036 R FF			mov velocityX, -1
 038F				done2:
					
 038F  C6 06 0038 R 00			mov paddleMovement,0
 0394  59				pop cx
 0395  5A				pop dx
 0396  58				pop ax
 0397  9D				popf
 0398  C3				ret
 0399				BallMovement ENDP
				
				
 0399				BallMovement1 PROC
 0399  9C				pushf
 039A  50				push ax
 039B  52				push dx ; paddleX
				
 039C  E8 037F				call EraseBall
 039F  80 3E 002E R 00			cmp GameOn, 0
 03A4  75 03 E9 008E			je done
				
					; call BallMovementBrick 
				
 03A9  8A 16 003B R			mov dl, paddleX; dl = paddleX
				
 03AD  8A 26 0036 R			mov ah, velocityX ; ah = velocity X
 03B1  A0 0037 R			mov al, velocityY ; al = velocity Y
				
 03B4  00 26 0033 R			add ballCurrentX, ah
 03B8  00 06 0034 R			add ballCurrentY, al
				
 03BC  80 3E 0034 R 04			cmp ballCurrentY, 4
 03C1  7F 0A				jg checklow
 03C3  C6 06 0034 R 04			mov ballCurrentY, 4
 03C8  F6 D8				neg al	
 03CA  A2 0037 R			mov velocityY, al
 03CD				checklow:
 03CD  80 3E 0034 R 15			cmp ballCurrentY, 21
 03D2  7C 19				jl checkxleft
 03D4  C6 06 0034 R 15			mov ballCurrentY, 21
 03D9  38 16 0033 R			cmp ballCurrentX, dl
 03DD  72 34				jb over
 03DF  80 C2 0A				add dl, 10
 03E2  38 16 0033 R			cmp ballCurrentX, dl
 03E6  77 2B				ja over
 03E8  F6 D8				neg al	
 03EA  A2 0037 R			mov velocityY, al
 03ED				checkxleft:
 03ED  80 3E 0033 R 01			cmp ballCurrentX, 1
 03F2  7F 0B				jg checkxright
 03F4  C6 06 0033 R 01			mov ballCurrentX, 1
 03F9  F6 DC				neg ah	
 03FB  88 26 0036 R			mov velocityX, ah
 03FF				checkxright:
 03FF  80 3E 0033 R 4E			cmp ballCurrentX, 78
 0404  7C 31				jl done
 0406  C6 06 0033 R 4E			mov ballCurrentX, 78
 040B  F6 DC				neg ah
 040D  88 26 0036 R			mov velocityX, ah
 0411  EB 24				jmp done
 0413				over:
 0413  E8 0308				call EraseBall
 0416  FE 0E 0002 R			dec Life
 041A  80 3E 0002 R 00			cmp Life, 0
 041F  74 11				je gamelose
 0421  C6 06 002E R 00			mov GameOn, 0
 0426  C6 06 0033 R 28			mov BallCurrentX, 40
 042B  C6 06 0034 R 15			mov ballCurrentY, 21
 0430  EB 05				jmp done
 0432				gamelose:
 0432  C6 06 002B R 01			mov GameOver, 1
 0437				done:
 0437  E8 004D				call BallMovementBrick
 043A  80 3E 0035 R 00			cmp ballOnBrick, 0 ; no collision
 043F  74 2D				je skipCollision
				
					; Temporarily play game sound here
 0441  52				push dx  ; ;; ; ; 
 0442  BA 05DC				mov dx, 1500 ; ;; ; ; 
 0445  E8 FBFA				call PlayFrequency; ;; ; ; 
 0448  5A				pop dx; ;; ; ; 
					; sound ^^^ when pop
				
 0449  A1 002C R			mov ax, PlayScore
 044C  83 C0 01				add ax, 1
 044F  A3 002C R			mov PlayScore, ax
 0452  A0 0037 R			mov al, velocityY
 0455  F6 D8				neg al
 0457  A2 0037 R			mov velocityY, al
 045A  C6 06 0035 R 00			mov ballOnBrick, 0
 045F  81 3E 002C R 01F4		cmp PlayScore, 500
 0465  73 02				jae win
 0467  EB 05				jmp skipCollision
 0469				win:
 0469  C6 06 002B R 00			mov GameOver, 0
 046E				skipCollision:
 046E  E8 0275				call SpawnBall
					; mov dx, OFFSET ballCurrentX
					; mov cx, 2 
					; call DumpMem 
 0471  5A				pop dx
 0472  58				pop ax
 0473  9D				popf
 0474  C3				ret
 0475				BallMovement1 ENDP
				
 0475				SwitchDI PROC 
 0475  9C				pushf
 0476  83 FF 0C				cmp di, 12
 0479  74 05				je switchTo11
 047B				switchTo12:
 047B  BF 000C				mov di, 12 
 047E  EB 05				jmp Switched 
 0480				switchTo11:
 0480  BF 000B				mov di, 11
 0483  EB 00				jmp Switched
 0485				Switched:
 0485  9D				popf 
 0486  C3				ret 
 0487				SwitchDI ENDP
				
				
 0487				BallMovementBrick PROC 
 0487  9C				pushf
 0488  50				push ax
 0489  53				push bx
 048A  51				push cx
 048B  52				push dx 
 048C  56				push si 
 048D  57				push di 
 048E  55				push bp 
 048F  06				push es 
				
 0490  C6 06 0035 R 00			mov ballOnBrick, 0
 0495  8A 26 0034 R			mov ah, ballCurrentY ; 0B
 0499  A0 0033 R			mov al, ballCurrentX ; 1E
 049C  BE 0000				mov si, 0 
				
					; range of brick levels
 049F  80 FC 05				cmp ah, 5 
 04A2  72 71				jb brickNoTouch 
 04A4  80 FC 0B				cmp ah, 11
 04A7  77 6C				ja brickNoTouch
				
					; check here which kind of level it interacted with: 
 04A9  3C 04				cmp al, 4
 04AB  72 68				jb brickNoTouch
 04AD  3C 4A				cmp al, 74
 04AF  77 64				ja brickNoTouch
 04B1  2C 04				sub al, 4 ; for easier calculations, now it's 0 - 70
					
 04B3  80 FC 05				cmp ah, 5
 04B6  9C				pushf 
 04B7  BD 0000				mov bp, 0
 04BA  9D				popf
 04BB  74 20				je brickWith12
					
 04BD  80 FC 07				cmp ah, 7
 04C0  9C				pushf 
 04C1  83 C5 0C				add bp, 12
 04C4  9D				popf
 04C5  74 26				je brickWith11
				
 04C7  80 FC 09				cmp ah, 9
 04CA  9C				pushf 
 04CB  83 C5 0B				add bp, 11
 04CE  9D				popf
 04CF  74 0C				je brickWith12
				
 04D1  80 FC 0B				cmp ah, 11
 04D4  9C				pushf 
 04D5  83 C5 0C				add bp, 12
 04D8  9D				popf
 04D9  74 12				je brickWith11
 04DB  EB 38				jmp brickNoTouch
				
 04DD				brickWith12: 
 04DD  3C 05				cmp al, 5
 04DF  72 1E				jb brickDecrease
 04E1  74 32				je brickNoTouch
 04E3  83 FE 0C				cmp si, 12 ; 11 to 12
 04E6  74 2D				je brickNoTouch
 04E8  2C 06				sub al, 6 ;; CHANGED HERE
 04EA  46				inc si
 04EB  EB F0				jmp brickWith12
				
 04ED				brickWith11:
 04ED  2C 03				sub al, 3
 04EF				brickWith11Loop:
 04EF  3C 05				cmp al, 5
 04F1  72 0C				jb brickDecrease
 04F3  74 20				je brickNoTouch
 04F5  83 FE 0B				cmp si, 11 ;  10 to 11
 04F8  74 1B				je brickNoTouch
 04FA  2C 06				sub al, 6 ; CHANGED HERE
 04FC  46				inc si
 04FD  EB F0				jmp brickWith11Loop
				
 04FF				brickDecrease:
 04FF  BB 0041 R			mov bx, OFFSET bricksScores
 0502  B1 00				mov cl, 0
 0504  03 DD				add bx, bp
 0506  03 DE				add bx, si
 0508  38 0F				cmp [bx], cl ; if in table it's 0 or less than 0 
 050A  74 09				je brickNoTouch
 050C  B1 01				mov cl, 1
 050E  28 0F				sub [bx], cl
 0510  C6 06 0035 R 01			mov ballOnBrick, 1
 0515				brickNoTouch:
 0515  07				pop es 
 0516  5D				pop bp 
 0517  5F				pop di 
 0518  5E				pop si 
 0519  5A				pop dx 
 051A  59				pop cx 
 051B  5B				pop bx 
 051C  58				pop ax
 051D  9D				popf
 051E  C3				ret 
 051F				BallMovementBrick ENDP
				
				
 051F				ErasePaddle PROC 
 051F  9C				pushf
 0520  52				push dx
 0521  50				push ax
 0522  57			    push di
 0523  51			    push cx
				
 0524  8A 36 003C R			mov dh, paddleY
 0528  8A 16 003B R			mov dl, paddleX
				
 052C  8B F8				mov di, ax
 052E  B8 0000				mov ax, 0
 0531  8A C6				mov al, dh 
 0533  BB 00A0				mov bx, 160
 0536  52				push dx
 0537  F7 E3				mul bx
 0539  5A				pop dx
 053A  81 E2 00FF			and dx, 11111111b
 053E  03 C2				add ax, dx
 0540  03 C2				add ax, dx
 0542  8B F8				mov di, ax ; setup location 
				
 0544  B2 20				mov dl, ' ' ; setup char
 0546  B9 000A				mov cx, 10 ; counter
 0549  B8 B800				mov	ax, 0B800h ; screen loc
 054C  8E C0				mov	es, ax ; screen seg
 054E  BD 0000				mov bp, 0
				
 0551				onePaddleCharDelete:
 0551  26: 88 13			mov es:[di + bp], dl
 0554  83 C5 02				add bp, 2
 0557  E2 F8				loop onePaddleCharDelete
				
 0559  59			    pop cx
 055A  5F			    pop di
 055B  58				pop ax
 055C  5A				pop dx
 055D  9D				popf
 055E  C3				ret
 055F				ErasePaddle ENDP
				
 055F				MovePaddle PROC 
 055F  9C				pushf
 0560  52			    push dx
 0561  50				push ax
 0562  57			    push di
 0563  51			    push cx
				
 0564  8A 36 003C R			mov dh, paddleY
 0568  8A 16 003B R			mov dl, paddleX
				
 056C  8B F8				mov di, ax
 056E  B8 0000				mov ax, 0
 0571  8A C6				mov al, dh 
 0573  BB 00A0				mov bx, 160
 0576  52				push dx
 0577  F7 E3				mul bx
 0579  5A				pop dx
 057A  81 E2 00FF			and dx, 11111111b
 057E  03 C2				add ax, dx
 0580  03 C2				add ax, dx
 0582  8B F8				mov di, ax ; setup location 
				
 0584  8A 16 003F R			mov dl, paddleChar ; setup char
 0588  B6 20				mov dh, ' '
 058A  B9 000A				mov cx, 10 ; counter
 058D  B8 B800				mov	ax, 0B800h ; screen loc
 0590  8E C0				mov	es, ax ; screen seg
 0592  BD 0000				mov bp, 0
				
 0595				onePaddleChar:
 0595  26: 88 13			mov es:[di + bp], dl 
 0598  83 C5 02				add bp, 2
 059B  E2 F8				loop onePaddleChar
				
 059D  59			    pop cx
 059E  5F			    pop di
 059F  58				pop ax
 05A0  5A				pop dx
 05A1  9D				popf
 05A2  C3				ret
 05A3				MovePaddle ENDP
				
				
 05A3				RefreshBricksGrid PROC 
 05A3  9C				pushf
 05A4  50				push ax
 05A5  53				push bx
 05A6  51				push cx
 05A7  52				push dx 
 05A8  56				push si 
 05A9  57				push di 
 05AA  55				push bp 
 05AB  06				push es 
				
 05AC  51				push cx 
 05AD  52				push dx 
 05AE  BA 0041 R			mov dx, OFFSET bricksScores
 05B1  B9 0064				mov cx, 100
					; call DumpMem
 05B4  5A				pop dx 
 05B5  59				pop cx
				
 05B6  B7 04				mov bh, 0100b ; second level color
 05B8  B3 07				mov bl, 0111b ; white color (first level)
					
 05BA  8A 16 0040 R			mov dl, brickChar
 05BE  B8 B800				mov ax, 0B800h ; screen start
 05C1  8E C0				mov es, ax
 05C3  B8 0000				mov ax, 0
					; level by level.. check if they are not 0, display them..
					; 12 11 12 11 12 11 12
 05C6  BE 0000				mov si, 0
 05C9  BB 0041 R			mov bx, OFFSET bricksScores
 05CC  BF 0320				mov di, 800
					
 05CF				bricksLevelSeven:
 05CF  83 C7 08				add di, 8
 05D2  B9 000C				mov cx, 12
 05D5				drawBrickLevelSeven:
 05D5  8A 20				mov ah, [bx + si]
 05D7  80 FC 00				cmp ah, 0
 05DA  7E 15				jle skipBrickLevelSeven
 05DC  26: 88 15			mov es:[di], dl
 05DF  26: 88 55 02			mov es:[di + 2], dl
 05E3  26: 88 55 04			mov es:[di + 4], dl
 05E7  26: 88 55 06			mov es:[di + 6], dl
 05EB  26: 88 55 08			mov es:[di + 8], dl
 05EF  EB 17				jmp continueBrickLevelSeven
 05F1				skipBrickLevelSeven:
 05F1  52				push dx 
 05F2  B6 20				mov dh, ' '
 05F4  26: 88 35			mov es:[di], dh
 05F7  26: 88 75 02			mov es:[di + 2], dh
 05FB  26: 88 75 04			mov es:[di + 4], dh
 05FF  26: 88 75 06			mov es:[di + 6], dh
 0603  26: 88 75 08			mov es:[di + 8], dh
 0607  5A				pop dx
 0608				continueBrickLevelSeven:
 0608  83 C7 0C				add di, 12
 060B  83 C6 01				add si, 1
 060E  E2 C5				loop drawBrickLevelSeven
				
					; mov di, 960
				; bricksLevelSix:
				; 	add di, 14
				; 	mov cx, 11
				; drawBrickLevelSix:
				; 	mov ah, [bx + si]
				; 	cmp ah, 0
				; 	jle skipBrickLevelSix
				; 	mov es:[di], dl
				; 	mov es:[di + 2], dl
				; 	mov es:[di + 4], dl
				; 	mov es:[di + 6], dl
				; 	mov es:[di + 8], dl
				; 	jmp continueBrickLevelSix
				; skipBrickLevelSix:
				; 	push dx 
				; 	mov dh, ' '
				; 	mov es:[di], dh
				; 	mov es:[di + 2], dh
				; 	mov es:[di + 4], dh
				; 	mov es:[di + 6], dh
				; 	mov es:[di + 8], dh
				; 	pop dx
				; continueBrickLevelSix:
				; 	add si, 1
				; 	add di, 12 
				; 	loop drawBrickLevelSix
				
				
 0610  BF 0460				mov di, 1120
 0613				bricksLevelFive:
 0613  83 C7 0E				add di, 14
 0616  B9 000B				mov cx, 11
 0619				drawBrickLevelFive:
 0619  8A 20				mov ah, [bx + si]
 061B  80 FC 00				cmp ah, 0
 061E  7E 15				jle skipBricksLevelFive
 0620  26: 88 15			mov es:[di], dl
 0623  26: 88 55 02			mov es:[di + 2], dl
 0627  26: 88 55 04			mov es:[di + 4], dl
 062B  26: 88 55 06			mov es:[di + 6], dl
 062F  26: 88 55 08			mov es:[di + 8], dl
 0633  EB 17				jmp continueBrickLevelFive
 0635				skipBricksLevelFive:
 0635  52				push dx 
 0636  B6 20				mov dh, ' '
 0638  26: 88 35			mov es:[di], dh
 063B  26: 88 75 02			mov es:[di + 2], dh
 063F  26: 88 75 04			mov es:[di + 4], dh
 0643  26: 88 75 06			mov es:[di + 6], dh
 0647  26: 88 75 08			mov es:[di + 8], dh
 064B  5A				pop dx
 064C				continueBrickLevelFive:
 064C  83 C6 01				add si, 1
 064F  83 C7 0C				add di, 12 
 0652  E2 C5				loop drawBrickLevelFive
				
				
				; 	mov di, 1280
				; bricksLevelFour:
				; 	add di, 14
				; 	mov cx, 11
				; drawBrickLevelFour:
				; 	mov ah, [bx + si]
				; 	cmp ah, 0
				; 	jle skipBrickLevelFour
				; 	mov es:[di], dl
				; 	mov es:[di + 2], dl
				; 	mov es:[di + 4], dl
				; 	mov es:[di + 6], dl
				; 	mov es:[di + 8], dl
				; 	jmp continueBrickLevelFour
				; skipBrickLevelFour:
				; 	push dx 
				; 	mov dh, ' '
				; 	mov es:[di], dh
				; 	mov es:[di + 2], dh
				; 	mov es:[di + 4], dh
				; 	mov es:[di + 6], dh
				; 	mov es:[di + 8], dh
				; 	pop dx
				; continueBrickLevelFour:
				; 	add si, 1
				; 	add di, 12 
				; 	loop drawBrickLevelFour
					
				
				
 0654  BF 05A0				mov di, 1440
 0657				bricksLevelThree:
 0657  83 C7 08				add di, 8
 065A  B9 000C				mov cx, 12
 065D				drawBrickLevelThree:
 065D  8A 20				mov ah, [bx + si]
 065F  80 FC 00				cmp ah, 0
 0662  7E 15				jle skipBrickLevelThree
 0664  26: 88 15			mov es:[di], dl
 0667  26: 88 55 02			mov es:[di + 2], dl
 066B  26: 88 55 04			mov es:[di + 4], dl
 066F  26: 88 55 06			mov es:[di + 6], dl
 0673  26: 88 55 08			mov es:[di + 8], dl
 0677  EB 17				jmp continueBrickLevelThree
 0679				skipBrickLevelThree:
 0679  52				push dx 
 067A  B6 20				mov dh, ' '
 067C  26: 88 35			mov es:[di], dh
 067F  26: 88 75 02			mov es:[di + 2], dh
 0683  26: 88 75 04			mov es:[di + 4], dh
 0687  26: 88 75 06			mov es:[di + 6], dh
 068B  26: 88 75 08			mov es:[di + 8], dh
 068F  5A				pop dx
 0690				continueBrickLevelThree:
 0690  83 C6 01				add si, 1
 0693  83 C7 0C				add di, 12 
 0696  E2 C5				loop drawBrickLevelThree 
				
				
				; 	mov di, 1600
				; bricksLevelTwo: 
				; 	add di, 14
				; 	mov cx, 11
				; drawBrickLevelTwo:
				; 	mov ah, [bx + si]
				; 	cmp ah, 0
				; 	jle skipBrickLevelTwo
				; 	mov es:[di], dl
				; 	mov es:[di + 2], dl
				; 	mov es:[di + 4], dl
				; 	mov es:[di + 6], dl
				; 	mov es:[di + 8], dl
				; 	jmp continueBrickLevelTwo
				; skipBrickLevelTwo:
				; 	push dx 
				; 	mov dh, ' '
				; 	mov es:[di], dh
				; 	mov es:[di + 2], dh
				; 	mov es:[di + 4], dh
				; 	mov es:[di + 6], dh
				; 	mov es:[di + 8], dh
				; 	pop dx
				; continueBrickLevelTwo:
				; 	add si, 1
				; 	add di, 12 
				; 	loop drawBrickLevelTwo
				
				
				
				
 0698  BF 06E0				mov di, 1760
 069B				bricksLevelOne:
 069B  83 C7 0E				add di, 14
 069E  B9 000B				mov cx, 11
 06A1				drawBrickLevelOne:
 06A1  8A 20				mov ah, [bx + si]
 06A3  80 FC 00				cmp ah, 0
 06A6  7E 15				jle skipBrickLevelOne
 06A8  26: 88 15			mov es:[di], dl
 06AB  26: 88 55 02			mov es:[di + 2], dl
 06AF  26: 88 55 04			mov es:[di + 4], dl
 06B3  26: 88 55 06			mov es:[di + 6], dl
 06B7  26: 88 55 08			mov es:[di + 8], dl
 06BB  EB 17				jmp continueBrickLevelOne
 06BD				skipBrickLevelOne:
 06BD  52				push dx 
 06BE  B6 20				mov dh, ' '
 06C0  26: 88 35			mov es:[di], dh
 06C3  26: 88 75 02			mov es:[di + 2], dh
 06C7  26: 88 75 04			mov es:[di + 4], dh
 06CB  26: 88 75 06			mov es:[di + 6], dh
 06CF  26: 88 75 08			mov es:[di + 8], dh
 06D3  5A				pop dx
 06D4				continueBrickLevelOne:
 06D4  83 C6 01				add si, 1
 06D7  83 C7 0C				add di, 12 
 06DA  E2 C5				loop drawBrickLevelOne
				
				
 06DC  07				pop es 
 06DD  5D				pop bp 
 06DE  5F				pop di 
 06DF  5E				pop si 
 06E0  5A				pop dx 
 06E1  59				pop cx 
 06E2  5B				pop bx 
 06E3  58				pop ax
 06E4  9D				popf 
 06E5  C3				ret
 06E6				RefreshBricksGrid ENDP
				
				
 06E6				SpawnBall PROC 
 06E6  9C				pushf
 06E7  52			    push dx
 06E8  50				push ax
 06E9  57			    push di
 06EA  51			    push cx
				
 06EB  8A 36 0034 R			mov dh, ballCurrentY
 06EF  8A 16 0033 R			mov dl, ballCurrentX
 06F3  8B F8				mov di, ax
 06F5  B8 0000				mov ax, 0
 06F8  8A C6				mov al, dh 
 06FA  BB 00A0				mov bx, 160
 06FD  52				push dx
 06FE  F7 E3				mul bx
 0700  5A				pop dx
 0701  81 E2 00FF			and dx, 11111111b
 0705  03 C2				add ax, dx
 0707  03 C2				add ax, dx
 0709  8B F8				mov di, ax ; setup location 
				
 070B  B8 B800				mov ax, 0B800h
 070E  8E C0				mov es, ax 
 0710  B2 6F				mov dl, 'o'
 0712  BD 0000				mov bp, 0
					
 0715  26: 88 15			mov es:[di], dl
				
 0718  59			    pop cx
 0719  5F			    pop di
 071A  58				pop ax
 071B  5A				pop dx
 071C  9D				popf 
 071D  C3				ret
 071E				SpawnBall ENDP
				
				
 071E				EraseBall PROC 
 071E  9C				pushf
 071F  52			    push dx
 0720  50				push ax
 0721  57			    push di
 0722  51			    push cx
 0723  8A 36 0034 R			mov dh, ballCurrentY
 0727  8A 16 0033 R			mov dl, ballCurrentX
 072B  8B F8				mov di, ax
 072D  B8 0000				mov ax, 0
 0730  8A C6				mov al, dh 
 0732  BB 00A0				mov bx, 160
 0735  52				push dx
 0736  F7 E3				mul bx
 0738  5A				pop dx
 0739  81 E2 00FF			and dx, 11111111b
 073D  03 C2				add ax, dx
 073F  03 C2				add ax, dx
 0741  8B F8				mov di, ax ; setup location 
 0743  B8 B800				mov ax, 0B800h
 0746  8E C0				mov es, ax 
 0748  B2 20				mov dl, ' '
 074A  BD 0000				mov bp, 0
 074D  26: 88 15			mov es:[di], dl
 0750  59			    pop cx
 0751  5F			    pop di
 0752  58				pop ax
 0753  5A				pop dx
 0754  9D				popf 
 0755  C3				ret
 0756				EraseBall ENDP
				
 0756				SetupScreen PROC 
					; dx - picture offset
 0756  9C				pushf
 0757  57				push di
				
 0758  BF 0000				mov di, 0
 075B  8B EA				mov bp, dx
 075D  B9 0780				mov cx, 1920
 0760  B8 0000				mov ax, 0
				; screen is 80 * 24
 0763				pixel:
 0763  B8 B800				mov	ax, 0B800h
 0766  8E C0				mov	es, ax
				
 0768  B3 07				mov bl, 0111b ; color everything to white
 076A  26: 88 5D 01			mov es:[di + 1], bl 
				
 076E  3E: 8A 56 00			mov dl, ds:[bp]
 0772  80 FA 20				cmp dl, ' '
 0775  74 06				je empty 
 0777  B3 05				mov bl, 0101b
 0779  26: 88 5D 01			mov es:[di + 1], bl
 077D				empty:
 077D  26: 88 15			mov es:[di], dl
 0780  83 C7 02				add di, 2
 0783  45				inc bp
 0784  E2 DD			loop pixel
 0786  5F				pop di
 0787  9D				popf
 0788  C3				ret
 0789				SetupScreen ENDP
				
				
 0789				LoserScreen PROC 
					; dx - picture offset
 0789  9C				pushf
 078A  57				push di
 078B  E8 F89D				call SpeakerOff
 078E  BA 0840 R			mov dx, OFFSET loserLayout
				
 0791  BF 0000				mov di, 0
 0794  8B EA				mov bp, dx
 0796  B9 0780				mov cx, 1920
 0799  B8 0000				mov ax, 0
				; screen is 80 * 24
 079C				pixel:
 079C  B8 B800				mov	ax, 0B800h
 079F  8E C0				mov	es, ax
				
 07A1  3E: 8A 56 00			mov dl, ds:[bp]
 07A5  80 FA 20				cmp dl, ' '
 07A8  74 06				je empty 
 07AA  B3 07				mov bl, 0111b
 07AC  26: 88 5D 01			mov es:[di + 1], bl
 07B0				empty:
 07B0  26: 88 15			mov es:[di], dl
 07B3  83 C7 02				add di, 2
 07B6  45				inc bp
 07B7  E2 E3			loop pixel
 07B9  5F				pop di
 07BA  9D				popf
 07BB  C3				ret
 07BC				LoserScreen ENDP
				
				
 07BC				WinnerScreen PROC 
					; dx - picture offset
 07BC  9C				pushf
 07BD  57				push di
 07BE  BA 1742 R			mov dx, OFFSET WinnerLayout
				
 07C1  BF 0000				mov di, 0
 07C4  8B EA				mov bp, dx
 07C6  B9 0780				mov cx, 1920
 07C9  B8 0000				mov ax, 0
				; screen is 80 * 24
 07CC				pixel:
 07CC  B8 B800				mov	ax, 0B800h
 07CF  8E C0				mov	es, ax
				
 07D1  3E: 8A 56 00			mov dl, ds:[bp]
 07D5  80 FA 20				cmp dl, ' '
 07D8  74 06				je empty 
 07DA  B3 07				mov bl, 0111b
 07DC  26: 88 5D 01			mov es:[di + 1], bl
 07E0				empty:
 07E0  26: 88 15			mov es:[di], dl
 07E3  83 C7 02				add di, 2
 07E6  45				inc bp
 07E7  E2 E3			loop pixel
 07E9  5F				pop di
 07EA  9D				popf
 07EB  C3				ret
 07EC				WinnerScreen ENDP
				
 07EC				EraseScreen PROC 
					; dx - picture offset
 07EC  9C				pushf
 07ED  50				push ax
 07EE  53				push bx
 07EF  51				push cx
 07F0  52				push dx 
 07F1  56				push si 
 07F2  57				push di 
 07F3  55				push bp 
 07F4  06				push es 
 07F5  BA 006F R			mov dx, OFFSET gameLayout
				
 07F8  BF 0000				mov di, 0
 07FB  8B EA				mov bp, dx
 07FD  B9 0780				mov cx, 1920
 0800  B8 0000				mov ax, 0
				; screen is 80 * 24
 0803				pixel:
 0803  B8 B800				mov	ax, 0B800h
 0806  8E C0				mov	es, ax
				
 0808  3E: 8A 56 00			mov dl, ds:[bp]
 080C  26: 88 15			mov es:[di], dl
 080F  83 C7 02				add di, 2
 0812  45				inc bp
 0813  E2 EE				loop pixel
 0815  07				pop es 
 0816  5D				pop bp 
 0817  5F				pop di 
 0818  5E				pop si 
 0819  5A				pop dx 
 081A  59				pop cx 
 081B  5B				pop bx 
 081C  58				pop ax
 081D  9D				popf
 081E  C3				ret
 081F				EraseScreen ENDP
				
				
 081F				UserAction PROC 
 081F  9C				pushf
 0820  50				push ax
				
 0821  E8 FD3B				call MovePaddle
 0824				input:
 0824  B8 0000				mov ax, 0
 0827  B4 0B				mov ah, 0Bh
 0829  CD 21				int DOS
 082B  3C 00				cmp al, 0
 082D  75 03 E9 0088			je finishUserAction
 0832  B4 07				mov ah, 07h 
 0834  CD 21				int 21h
 0836  E8 FCE6				call ErasePaddle
 0839  3C 71			    cmp al, 'q'
 083B  74 3C			    je gameOverUA
 083D  3C 61				cmp al, 'a'
 083F  74 23				je paddleLeft 
 0841  3C 64				cmp al, 'd' 
 0843  74 0A				je paddleRight
 0845  3C 20				cmp al, ' '
 0847  74 37				je space
 0849  3C 6D				cmp al, 'm'
 084B  74 40				je mute
				
 084D  EB 6B				jmp finishUserAction
 084F				paddleRight:
 084F  80 3E 003B R 45			cmp paddleX, 69
 0854  74 04				je skipright
 0856  FE 06 003B R			inc paddleX
 085A				skipright:
 085A  E8 FD02				call MovePaddle
 085D  C6 06 0038 R 01			mov paddleMovement, 1
					; jmp input 
 0862  EB 56				jmp finishUserAction
 0864				paddleLeft:
 0864  80 3E 003B R 01			cmp paddleX, 1
 0869  74 09				je skipleft
 086B  FE 0E 003B R			dec paddleX
 086F  C6 06 0038 R 02			mov paddleMovement, 2
 0874				skipleft:
 0874  E8 FCE8				call MovePaddle
					; jmp input 
 0877  EB 41				jmp finishUserAction
 0879				gameOverUA:
 0879  C6 06 002B R 01		    mov GameOver, 1
 087E  EB 3A				jmp finishUserAction
				
 0880				space:
 0880  80 3E 002E R 00			cmp GameOn, 0
 0885  74 19				je change
 0887  FE 0E 002E R			dec GameOn
 088B  EB 2D				jmp finishUserAction
 088D				mute:
 088D  80 3E 0000 R 01			cmp isMute, 1
 0892  74 06				je unmute
 0894  FE 06 0000 R			inc isMute
 0898  EB 20				jmp finishUserAction
 089A				unmute:
 089A  FE 0E 0000 R			dec isMute
 089E  EB 1A				jmp finishUserAction
 08A0				change:
 08A0  FE 06 002E R			inc GameOn
 08A4  80 3E 0001 R 00			cmp StartMov, 0
 08A9  74 02				je setupVelocity
 08AB  EB 0D				jmp finishUserAction
 08AD				setupVelocity:
 08AD  E8 F756				call RandomVelX
 08B0  C6 06 0037 R FF			mov velocityY, -1
 08B5  C6 06 0001 R 01			mov StartMov, 1
 08BA				finishUserAction:
 08BA  9D				popf
 08BB  58				pop ax
 08BC  C3				ret
 08BD				UserAction ENDP
				
 08BD				WelcomeUser PROC 
 08BD  9C				pushf
 08BE  50				push ax 
				
 08BF  BA 0FC1 R			mov dx, OFFSET welcomeScreen
 08C2  E8 FE91				call SetupScreen
 08C5				inputWelcomeUser:
 08C5  E8 F95F				call CheckAlarms
 08C8  B8 0000				mov ax, 0
 08CB  B4 0B				mov ah, 0Bh
 08CD  CD 21				int DOS
 08CF  3C 00				cmp al, 0
 08D1  74 F2				je inputWelcomeUser
 08D3  B4 07				mov ah, 07h 
 08D5  CD 21				int 21h 
 08D7  3C 20				cmp al, ' '
 08D9  74 02				je finishWelcomeUser
 08DB  EB E8				jmp inputWelcomeUser
 08DD				finishWelcomeUser:
 08DD  58				pop ax
 08DE  9D				popf 
 08DF  C3				ret
 08E0				WelcomeUser ENDP
				
				
 08E0				GameLoop PROC
 08E0  9C				pushf
 08E1  50				push ax
 08E2  EB 0F				jmp	cond
 08E4				  top:
 08E4  E8 F7E5				call DisplayScore
 08E7  E8 F93D			    call CheckAlarms
 08EA  E8 FF32			    call UserAction
 08ED  E8 FCB3				call RefreshBricksGrid
 08F0  E8 FDF3				call SpawnBall
 08F3				  cond:
 08F3  80 3E 002B R 00		    cmp	GameOver, 0
 08F8  74 EA			    je	top
 08FA				  done:
 08FA  80 3E 002B R 01			cmp GameOver, 1 ; you lose
 08FF  74 07				je lose
				
 0901  80 3E 002B R 02			cmp GameOver, 2 ; you win
 0906  74 0B				je win
				
 0908				lose:
 0908  E8 FE7E				call LoserScreen
 090B  E8 F7BE				call DisplayScore ; make display loser score
 090E  E8 0000 E			call ReadChar
 0911  EB 05				jmp finish
 0913				win:
 0913  E8 FEA6				call WinnerScreen
 0916  EB 00				jmp finish
 0918				finish:
				
 0918  58			    pop ax
 0919  9D			    popf
 091A  C3			    ret
 091B				GameLoop ENDP
				
 091B				main PROC
 091B  B8 ---- R			mov	ax, @data	; Setup the data segment
 091E  8E D8				mov	ds, ax
 0920  E8 F843				call CursorOff
				
 0923  E8 F88E			    call HookTimerInterrupt
				
 0926  E8 F935				call RegBallAlarm
				
 0929  E8 F70A				call SetupMusic
 092C  B8 0003				mov	ax, 3
 092F  BA 006E R		 	mov	dx, OFFSET PlayNextNote
 0932  E8 F8CD				call	RegisterAlarm
				
 0935  E8 FF85				call WelcomeUser
					; here wait
					
				
 0938  BA 006F R			mov dx, OFFSET gameLayout
 093B  E8 FE18				call SetupScreen
 093E  E8 FDA5				call SpawnBall
 0941  E8 FF9C				call GameLoop
				    
 0944  E8 F897			    call UnHookInterrupt
 0947  E8 F6E1				call SpeakerOff
				
 094A  B8 4C00				mov	ax, DOSEXIT	; Signal DOS that we are done
 094D  CD 21				int	DOS
 094F				main ENDP
				END main
Microsoft (R) Macro Assembler Version 6.11		    11/07/23 19:43:13
KAKASHKA						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 1F6C	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 094F	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BallMovement1  . . . . . . . . .	P Near	 0399	  _TEXT	Length= 00DC Public C
  checklow . . . . . . . . . . .	L Near	 03CD	  _TEXT	
  checkxleft . . . . . . . . . .	L Near	 03ED	  _TEXT	
  checkxright  . . . . . . . . .	L Near	 03FF	  _TEXT	
  over . . . . . . . . . . . . .	L Near	 0413	  _TEXT	
  gamelose . . . . . . . . . . .	L Near	 0432	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0437	  _TEXT	
  win  . . . . . . . . . . . . .	L Near	 0469	  _TEXT	
  skipCollision  . . . . . . . .	L Near	 046E	  _TEXT	
BallMovementBrick  . . . . . . .	P Near	 0487	  _TEXT	Length= 0098 Public C
  brickWith12  . . . . . . . . .	L Near	 04DD	  _TEXT	
  brickWith11  . . . . . . . . .	L Near	 04ED	  _TEXT	
  brickWith11Loop  . . . . . . .	L Near	 04EF	  _TEXT	
  brickDecrease  . . . . . . . .	L Near	 04FF	  _TEXT	
  brickNoTouch . . . . . . . . .	L Near	 0515	  _TEXT	
BallMovement . . . . . . . . . .	P Near	 0271	  _TEXT	Length= 01D4 Public C
  checklow . . . . . . . . . . .	L Near	 02AD	  _TEXT	
  moveballright  . . . . . . . .	L Near	 02DD	  _TEXT	
  moveballleft . . . . . . . . .	L Near	 02E1	  _TEXT	
  changeVelX . . . . . . . . . .	L Near	 02E3	  _TEXT	
  checkxleft . . . . . . . . . .	L Near	 02E7	  _TEXT	
  checkxright  . . . . . . . . .	L Near	 02F9	  _TEXT	
  over . . . . . . . . . . . . .	L Near	 030D	  _TEXT	
  gamelose . . . . . . . . . . .	L Near	 0331	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0336	  _TEXT	
  here1  . . . . . . . . . . . .	L Near	 034F	  _TEXT	
  win  . . . . . . . . . . . . .	L Near	 0369	  _TEXT	
  skipCollision  . . . . . . . .	L Near	 0370	  _TEXT	
  upperbound . . . . . . . . . .	L Near	 0383	  _TEXT	
  lowerbound . . . . . . . . . .	L Near	 038A	  _TEXT	
  done2  . . . . . . . . . . . .	L Near	 038F	  _TEXT	
CheckAlarms  . . . . . . . . . .	P Near	 0227	  _TEXT	Length= 0037 Public C
  top  . . . . . . . . . . . . .	L Near	 0241	  _TEXT	
  running  . . . . . . . . . . .	L Near	 0250	  _TEXT	
  unused . . . . . . . . . . . .	L Near	 0250	  _TEXT	
  cond . . . . . . . . . . . . .	L Near	 0254	  _TEXT	
  notick . . . . . . . . . . . .	L Near	 025A	  _TEXT	
CursorOff  . . . . . . . . . . .	P Near	 0166	  _TEXT	Length= 001B Public C
CursorOn . . . . . . . . . . . .	P Near	 0181	  _TEXT	Length= 001D Public C
DOS_GetInterruptVector . . . . .	P Near	 019E	  _TEXT	Length= 0007 Public C
DOS_SetInterruptVector . . . . .	P Near	 01A5	  _TEXT	Length= 000F Public C
DisplayScore . . . . . . . . . .	P Near	 00CC	  _TEXT	Length= 0085 Public C
  lifeThree  . . . . . . . . . .	L Near	 00F3	  _TEXT	
  lifeTwo  . . . . . . . . . . .	L Near	 00FA	  _TEXT	
  lifeOne  . . . . . . . . . . .	L Near	 0101	  _TEXT	
  scoring  . . . . . . . . . . .	L Near	 0108	  _TEXT	
  twodigitScore  . . . . . . . .	L Near	 0129	  _TEXT	
  scoringDone  . . . . . . . . .	L Near	 0147	  _TEXT	
DumpLongRegs . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
EraseBall  . . . . . . . . . . .	P Near	 071E	  _TEXT	Length= 0038 Public C
ErasePaddle  . . . . . . . . . .	P Near	 051F	  _TEXT	Length= 0040 Public C
  onePaddleCharDelete  . . . . .	L Near	 0551	  _TEXT	
EraseScreen  . . . . . . . . . .	P Near	 07EC	  _TEXT	Length= 0033 Public C
  pixel  . . . . . . . . . . . .	L Near	 0803	  _TEXT	
GameLoop . . . . . . . . . . . .	P Near	 08E0	  _TEXT	Length= 003B Public C
  top  . . . . . . . . . . . . .	L Near	 08E4	  _TEXT	
  cond . . . . . . . . . . . . .	L Near	 08F3	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 08FA	  _TEXT	
  lose . . . . . . . . . . . . .	L Near	 0908	  _TEXT	
  win  . . . . . . . . . . . . .	L Near	 0913	  _TEXT	
  finish . . . . . . . . . . . .	L Near	 0918	  _TEXT	
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
HookTimerInterrupt . . . . . . .	P Near	 01B4	  _TEXT	Length= 002A Public C
LoserScreen  . . . . . . . . . .	P Near	 0789	  _TEXT	Length= 0033 Public C
  pixel  . . . . . . . . . . . .	L Near	 079C	  _TEXT	
  empty  . . . . . . . . . . . .	L Near	 07B0	  _TEXT	
MovePaddle . . . . . . . . . . .	P Near	 055F	  _TEXT	Length= 0044 Public C
  onePaddleChar  . . . . . . . .	L Near	 0595	  _TEXT	
NewLine  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
NewTimerHandler  . . . . . . . .	P Near	 01F8	  _TEXT	Length= 000A Public C
PlayFrequency  . . . . . . . . .	P Near	 0042	  _TEXT	Length= 002C Public C
  done . . . . . . . . . . . . .	L Near	 005F	  _TEXT	
  rest . . . . . . . . . . . . .	L Near	 0069	  _TEXT	
PlayNextNote . . . . . . . . . .	P Near	 006E	  _TEXT	Length= 003F Public C
  cont . . . . . . . . . . . . .	L Near	 0087	  _TEXT	
  skip . . . . . . . . . . . . .	L Near	 0093	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 009C	  _TEXT	
PrintVersion . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
RandomVelX . . . . . . . . . . .	P Near	 0006	  _TEXT	Length= 001A Public C
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadHexByte  . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadHexDigit . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadHexDoubleWord  . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadHexWord  . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadLine . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ReadUInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
RefreshBricksGrid  . . . . . . .	P Near	 05A3	  _TEXT	Length= 0143 Public C
  bricksLevelSeven . . . . . . .	L Near	 05CF	  _TEXT	
  drawBrickLevelSeven  . . . . .	L Near	 05D5	  _TEXT	
  skipBrickLevelSeven  . . . . .	L Near	 05F1	  _TEXT	
  continueBrickLevelSeven  . . .	L Near	 0608	  _TEXT	
  bricksLevelFive  . . . . . . .	L Near	 0613	  _TEXT	
  drawBrickLevelFive . . . . . .	L Near	 0619	  _TEXT	
  skipBricksLevelFive  . . . . .	L Near	 0635	  _TEXT	
  continueBrickLevelFive . . . .	L Near	 064C	  _TEXT	
  bricksLevelThree . . . . . . .	L Near	 0657	  _TEXT	
  drawBrickLevelThree  . . . . .	L Near	 065D	  _TEXT	
  skipBrickLevelThree  . . . . .	L Near	 0679	  _TEXT	
  continueBrickLevelThree  . . .	L Near	 0690	  _TEXT	
  bricksLevelOne . . . . . . . .	L Near	 069B	  _TEXT	
  drawBrickLevelOne  . . . . . .	L Near	 06A1	  _TEXT	
  skipBrickLevelOne  . . . . . .	L Near	 06BD	  _TEXT	
  continueBrickLevelOne  . . . .	L Near	 06D4	  _TEXT	
RegBallAlarm . . . . . . . . . .	P Near	 025E	  _TEXT	Length= 0013 Public C
RegisterAlarm  . . . . . . . . .	P Near	 0202	  _TEXT	Length= 0025 Public C
  top  . . . . . . . . . . . . .	L Near	 020D	  _TEXT	
  used . . . . . . . . . . . . .	L Near	 0219	  _TEXT	
  cond . . . . . . . . . . . . .	L Near	 021D	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0223	  _TEXT	
SetupMusic . . . . . . . . . . .	P Near	 0036	  _TEXT	Length= 000C Public C
SetupScreen  . . . . . . . . . .	P Near	 0756	  _TEXT	Length= 0033 Public C
  pixel  . . . . . . . . . . . .	L Near	 0763	  _TEXT	
  empty  . . . . . . . . . . . .	L Near	 077D	  _TEXT	
SkipToEOL  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
SpawnBall  . . . . . . . . . . .	P Near	 06E6	  _TEXT	Length= 0038 Public C
SpeakerOff . . . . . . . . . . .	P Near	 002B	  _TEXT	Length= 000B Public C
SpeakerOn  . . . . . . . . . . .	P Near	 0020	  _TEXT	Length= 000B Public C
SplitIntoDigits  . . . . . . . .	P Near	 0151	  _TEXT	Length= 0015 Public C
  countTens  . . . . . . . . . .	L Near	 0156	  _TEXT	
  lessThanTen  . . . . . . . . .	L Near	 0161	  _TEXT	
StopNote . . . . . . . . . . . .	P Near	 00AD	  _TEXT	Length= 001F Public C
  done . . . . . . . . . . . . .	L Near	 00C2	  _TEXT	
SwitchDI . . . . . . . . . . . .	P Near	 0475	  _TEXT	Length= 0012 Public C
  switchTo12 . . . . . . . . . .	L Near	 047B	  _TEXT	
  switchTo11 . . . . . . . . . .	L Near	 0480	  _TEXT	
  Switched . . . . . . . . . . .	L Near	 0485	  _TEXT	
UnHookInterrupt  . . . . . . . .	P Near	 01DE	  _TEXT	Length= 001A Public C
UserAction . . . . . . . . . . .	P Near	 081F	  _TEXT	Length= 009E Public C
  input  . . . . . . . . . . . .	L Near	 0824	  _TEXT	
  paddleRight  . . . . . . . . .	L Near	 084F	  _TEXT	
  skipright  . . . . . . . . . .	L Near	 085A	  _TEXT	
  paddleLeft . . . . . . . . . .	L Near	 0864	  _TEXT	
  skipleft . . . . . . . . . . .	L Near	 0874	  _TEXT	
  gameOverUA . . . . . . . . . .	L Near	 0879	  _TEXT	
  space  . . . . . . . . . . . .	L Near	 0880	  _TEXT	
  mute . . . . . . . . . . . . .	L Near	 088D	  _TEXT	
  unmute . . . . . . . . . . . .	L Near	 089A	  _TEXT	
  change . . . . . . . . . . . .	L Near	 08A0	  _TEXT	
  setupVelocity  . . . . . . . .	L Near	 08AD	  _TEXT	
  finishUserAction . . . . . . .	L Near	 08BA	  _TEXT	
Version  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WelcomeUser  . . . . . . . . . .	P Near	 08BD	  _TEXT	Length= 0023 Public C
  inputWelcomeUser . . . . . . .	L Near	 08C5	  _TEXT	
  finishWelcomeUser  . . . . . .	L Near	 08DD	  _TEXT	
WinnerScreen . . . . . . . . . .	P Near	 07BC	  _TEXT	Length= 0030 Public C
  pixel  . . . . . . . . . . . .	L Near	 07CC	  _TEXT	
  empty  . . . . . . . . . . . .	L Near	 07E0	  _TEXT	
WriteBit . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteCSString  . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteHexByte . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteHexDigit  . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteHexDoubleWord . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteHexWord . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
WriteUInt  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
main . . . . . . . . . . . . . .	P Near	 091B	  _TEXT	Length= 0034 Public C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0001h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
Alarms . . . . . . . . . . . . .	Word	 0003	  _DATA	
CursorPos  . . . . . . . . . . .	Word	 002F	  _DATA	
DOSEXIT  . . . . . . . . . . . .	Number	 4C00h	 
DOS  . . . . . . . . . . . . . .	Number	 0021h	 
GameOn . . . . . . . . . . . . .	Byte	 002E	  _DATA	
GameOver . . . . . . . . . . . .	Byte	 002B	  _DATA	
HandlerCount . . . . . . . . . .	Number	 000Ah	 
Life . . . . . . . . . . . . . .	Byte	 0002	  _DATA	
MusicIndex . . . . . . . . . . .	Word	 1F69	  _DATA	
MusicScore . . . . . . . . . . .	Word	 1F13	  _DATA	
NOTE_GAP_TICKS . . . . . . . . .	Number	 0002h	 
NOTE_TICKS . . . . . . . . . . .	Number	 0002h	 
OldTimerHandler  . . . . . . . .	DWord	 0000	  _TEXT	
PlayScore  . . . . . . . . . . .	Word	 002C	  _DATA	
READY_TIMER  . . . . . . . . . .	Number	 00B6h	 
SPEAKER_PORT . . . . . . . . . .	Number	 0061h	 
SPEED  . . . . . . . . . . . . .	Number	 0003h	 
SYSTEM_TIME_INT  . . . . . . . .	Number	 001Ah	 
SYSTEM_TIME  . . . . . . . . . .	Number	 0000h	 
SoundOff . . . . . . . . . . . .	Byte	 1F6B	  _DATA	
StartMov . . . . . . . . . . . .	Byte	 0001	  _DATA	
TIMER_CONTROL_PORT . . . . . . .	Number	 0043h	 
TIMER_DATA_PORT  . . . . . . . .	Number	 0042h	 
TIMER_HANDLER  . . . . . . . . .	Number	 001Ch	 
Tick . . . . . . . . . . . . . .	Word	 0004	  _TEXT	
WinnerLayout . . . . . . . . . .	Byte	 1742	  _DATA	
ballCurrentX . . . . . . . . . .	Byte	 0033	  _DATA	
ballCurrentY . . . . . . . . . .	Byte	 0034	  _DATA	
ballNextX  . . . . . . . . . . .	Byte	 0039	  _DATA	
ballNextY  . . . . . . . . . . .	Byte	 003A	  _DATA	
ballOnBrick  . . . . . . . . . .	Byte	 0035	  _DATA	
brickChar  . . . . . . . . . . .	Byte	 0040	  _DATA	
brickX . . . . . . . . . . . . .	Byte	 003E	  _DATA	
brickY . . . . . . . . . . . . .	Byte	 003D	  _DATA	
bricksScores . . . . . . . . . .	Byte	 0041	  _DATA	
gameLayout . . . . . . . . . . .	Byte	 006F	  _DATA	
isMute . . . . . . . . . . . . .	Byte	 0000	  _DATA	
loserLayout  . . . . . . . . . .	Byte	 0840	  _DATA	
paddleChar . . . . . . . . . . .	Byte	 003F	  _DATA	
paddleMovement . . . . . . . . .	Byte	 0038	  _DATA	
paddleX  . . . . . . . . . . . .	Byte	 003B	  _DATA	
paddleY  . . . . . . . . . . . .	Byte	 003C	  _DATA	
velocityX  . . . . . . . . . . .	Byte	 0036	  _DATA	
velocityY  . . . . . . . . . . .	Byte	 0037	  _DATA	
welcomeScreen  . . . . . . . . .	Byte	 0FC1	  _DATA	

	   0 Warnings
	   0 Errors
